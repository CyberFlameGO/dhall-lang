{- Render an `XML` value as `Text`

   *WARNING:* rendering does not include any XML injection mitigations,
   therefore it should not be used to process arbitrary strings into
   element attributes or element data.

   For indentation and schema validation, see the `xmllint` utility
   bundled with libxml2.

```
let XML = ./package.dhall

in  XML.render
    ( XML.node
      { tag = "foo"
      , attributes = [ XML.attribute "a" "x", XML.attribute "b" (Natural/show 2) ]
      , content = [ XML.leaf { tag = "bar", attributes = XML.emptyAttributes } ]
      }
    )
= "<foo a=\"x\" b=\"2\"><bar/></foo>"
```

-}

let XML =
        ./Type sha256:7391450c05bd375f6190dd0a356f67524eb73cf0956b6401346ed6f287c41f3a
      ? ./Type

let Text/concatMap =
        ../Text/concatMap sha256:7a0b0b99643de69d6f94ba49441cd0fa0507cbdfa8ace0295f16097af37e226f
      ? ../Text/concatMap

let Text/concat =
        ../Text/concat sha256:731265b0288e8a905ecff95c97333ee2db614c39d69f1514cb8eed9259745fc0
      ? ../Text/concat

let Attr = { mapKey : Text, mapValue : Text }

let renderAttr = λ(x : Attr) → " ${x.mapKey}=\"${x.mapValue}\""

let render
    : XML → Text
    =   λ(x : XML)
      → x
        Text
        { text =
            λ(d : Text) → d
        , element =
              λ ( elem
                : { attributes :
                      List { mapKey : Text, mapValue : Text }
                  , content :
                      List Text
                  , tag :
                      Text
                  }
                )
            → let attribs = Text/concatMap Attr renderAttr elem.attributes
              
              in      "<${elem.tag}${attribs}"
                  ++  (       if Natural/isZero (List/length Text elem.content)
                        
                        then  "/>"
                        
                        else  ">${Text/concat elem.content}</${elem.tag}>"
                      )
        }

in  render
