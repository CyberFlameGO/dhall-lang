{-
`subtract m n` computes `n - m`.
-}
let ifPositive =
        ./ifPositive sha256:5d489fbcc2da522928dd9ca6dff957eeba67841928d2fe928b7c2b518166b233
      ? ./ifPositive

let subtract =
        λ(x : Natural)
      → λ(y : Natural)
      → let d = Natural/subtract x y

        in        if Natural/isZero d

            then  Integer/negate (Natural/toInteger (Natural/subtract y x))

            else  Natural/toInteger d

let subtract
    : Integer → Integer → Integer
    = ifPositive
        (Integer → Integer)
        (   λ(m : Natural)
          → ifPositive
              Integer
              (λ(n : Natural) → subtract m n)
              (λ(n : Natural) → Integer/negate (Natural/toInteger (m + n)))
        )
        (   λ(m : Natural)
          → ifPositive
              Integer
              (λ(n : Natural) → Natural/toInteger (m + n))
              (λ(n : Natural) → subtract n m)
        )

let example0 = assert : subtract +3 +5 ≡ +2

let example1 = assert : subtract +4 +4 ≡ +0

let example2 = assert : subtract +5 +3 ≡ -2

let example3 = assert : subtract -3 -5 ≡ -2

let example4 = assert : subtract -4 -4 ≡ +0

let example5 = assert : subtract -5 -3 ≡ +2

let example6 = assert : subtract -3 +5 ≡ +8

let example7 = assert : subtract +3 -5 ≡ -8

let example8 = assert : subtract +0 -3 ≡ -3

in  subtract
